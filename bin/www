#!/usr/bin/env node

// sudo lsof -i:3012 ## see a specific port such as 3012 ##
// sudo kill PID

// Set timezone to New York for all logging
process.env.TZ = 'America/New_York';

/**
 * Module dependencies.
 */

const config = require("config");
const https = require("https");
const fs = require("fs");
const app = require("../app");

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

// Server detection logic
// Use environment variables to determine server type
console.log("process.env.HOSTNAME: " + process.env.HOSTNAME);
console.log("process.env.NODE_ENV: " + process.env.NODE_ENV);

// Detect server environment based on NODE_ENV and hostname
const productionHostname = process.env.PRODUCTION_HOSTNAME || "your-production-server.edu";
const isProduction = process.env.NODE_ENV === "production" || 
                    process.env.HOSTNAME === productionHostname;
const isLocalhost = !process.env.HOSTNAME || 
                   process.env.HOSTNAME === "localhost" || 
                   process.env.HOSTNAME === "127.0.0.1" ||
                   process.env.NODE_ENV === "development";

global.onServer = isProduction;
global.isLocalhost = isLocalhost;

console.log(`Environment: ${isProduction ? 'Production' : (isLocalhost ? 'Localhost' : 'Unknown')}`);
console.log(`On Server? : ${global.onServer}`);

const PORT = normalizePort(process.env.PORT || config.get("app.port") || 3012);

// SSL certificate configuration using environment variables
const defaultCertPath = process.env.HTTPS_CERT_PATH || "./security/cert.pem";
const defaultKeyPath = process.env.HTTPS_KEY_PATH || "./security/cert.key";

let server = {};

if (global.onServer) {
  // Production certificate paths from environment variables
  const prodCertPath = process.env.PROD_CERT_PATH || `/etc/pki/tls/certs/${productionHostname}-cert.pem`;
  const prodKeyPath = process.env.PROD_KEY_PATH || `/etc/pki/tls/certs/${productionHostname}-privkey.pem`;
  
  server = {
    key: prodKeyPath,
    cert: prodCertPath,
  };
} else {
  // Development certificate paths
  server = {
    key: defaultKeyPath,
    cert: defaultCertPath,
  };
}

https
  .createServer(
    {
      key: fs.readFileSync(server.key),
      cert: fs.readFileSync(server.cert),
    },
    app
  )
  .listen(PORT, () => {
    console.log(`HTTPS Server running on port ${PORT}`);
    console.log(`Server environment: ${global.onServer ? 'production' : 'development'}`);
    console.log(`Access URLs:`);
    if (global.onServer) {
      console.log(`  Production: https://${productionHostname}:${PORT}`);
    } else {
      console.log(`  Local: https://localhost:${PORT}`);
      console.log(`  Network: https://127.0.0.1:${PORT}`);
    }
    console.log(`API Endpoints:`);
    const baseUrl = global.onServer ? `https://${productionHostname}:${PORT}` : `https://localhost:${PORT}`;
    console.log(`  Patron API: ${baseUrl}/patronapi`);
    console.log(`  Recreation API: ${baseUrl}/recapi`);
    console.log(`  Floor Count API: ${baseUrl}/count_by_floor`);
  });
